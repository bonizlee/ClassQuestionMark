//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM 关系源元数据

[assembly: EdmRelationshipAttribute("ClassQuestionMarkModel", "FK_StudentInfo_0", "LabClass", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ClassQuestionMark.Model.LabClass), "StudentInfo", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassQuestionMark.Model.StudentInfo), true)]
[assembly: EdmRelationshipAttribute("ClassQuestionMarkModel", "FK_MarkInfo_0", "StudentInfo", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ClassQuestionMark.Model.StudentInfo), "MarkInfo", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassQuestionMark.Model.MarkInfo), true)]

#endregion

namespace ClassQuestionMark.Model
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class ClassQuestionMarkEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“ClassQuestionMarkEntities”部分中的连接字符串初始化新 ClassQuestionMarkEntities 对象。
        /// </summary>
        public ClassQuestionMarkEntities() : base("name=ClassQuestionMarkEntities", "ClassQuestionMarkEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 ClassQuestionMarkEntities 对象。
        /// </summary>
        public ClassQuestionMarkEntities(string connectionString) : base(connectionString, "ClassQuestionMarkEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 ClassQuestionMarkEntities 对象。
        /// </summary>
        public ClassQuestionMarkEntities(EntityConnection connection) : base(connection, "ClassQuestionMarkEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<LabClass> LabClass
        {
            get
            {
                if ((_LabClass == null))
                {
                    _LabClass = base.CreateObjectSet<LabClass>("LabClass");
                }
                return _LabClass;
            }
        }
        private ObjectSet<LabClass> _LabClass;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<MarkInfo> MarkInfo
        {
            get
            {
                if ((_MarkInfo == null))
                {
                    _MarkInfo = base.CreateObjectSet<MarkInfo>("MarkInfo");
                }
                return _MarkInfo;
            }
        }
        private ObjectSet<MarkInfo> _MarkInfo;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<StudentInfo> StudentInfo
        {
            get
            {
                if ((_StudentInfo == null))
                {
                    _StudentInfo = base.CreateObjectSet<StudentInfo>("StudentInfo");
                }
                return _StudentInfo;
            }
        }
        private ObjectSet<StudentInfo> _StudentInfo;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<TheoryClass> TheoryClass
        {
            get
            {
                if ((_TheoryClass == null))
                {
                    _TheoryClass = base.CreateObjectSet<TheoryClass>("TheoryClass");
                }
                return _TheoryClass;
            }
        }
        private ObjectSet<TheoryClass> _TheoryClass;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<StudentMark_View> StudentMark_View
        {
            get
            {
                if ((_StudentMark_View == null))
                {
                    _StudentMark_View = base.CreateObjectSet<StudentMark_View>("StudentMark_View");
                }
                return _StudentMark_View;
            }
        }
        private ObjectSet<StudentMark_View> _StudentMark_View;

        #endregion
        #region AddTo 方法
    
        /// <summary>
        /// 用于向 LabClass EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToLabClass(LabClass labClass)
        {
            base.AddObject("LabClass", labClass);
        }
    
        /// <summary>
        /// 用于向 MarkInfo EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToMarkInfo(MarkInfo markInfo)
        {
            base.AddObject("MarkInfo", markInfo);
        }
    
        /// <summary>
        /// 用于向 StudentInfo EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToStudentInfo(StudentInfo studentInfo)
        {
            base.AddObject("StudentInfo", studentInfo);
        }
    
        /// <summary>
        /// 用于向 TheoryClass EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToTheoryClass(TheoryClass theoryClass)
        {
            base.AddObject("TheoryClass", theoryClass);
        }
    
        /// <summary>
        /// 用于向 StudentMark_View EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToStudentMark_View(StudentMark_View studentMark_View)
        {
            base.AddObject("StudentMark_View", studentMark_View);
        }

        #endregion
    }
    

    #endregion
    
    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ClassQuestionMarkModel", Name="LabClass")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LabClass : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 LabClass 对象。
        /// </summary>
        /// <param name="labClassID">LabClassID 属性的初始值。</param>
        public static LabClass CreateLabClass(global::System.String labClassID)
        {
            LabClass labClass = new LabClass();
            labClass.LabClassID = labClassID;
            return labClass;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LabClassID
        {
            get
            {
                return _LabClassID;
            }
            set
            {
                if (_LabClassID != value)
                {
                    OnLabClassIDChanging(value);
                    ReportPropertyChanging("LabClassID");
                    _LabClassID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("LabClassID");
                    OnLabClassIDChanged();
                }
            }
        }
        private global::System.String _LabClassID;
        partial void OnLabClassIDChanging(global::System.String value);
        partial void OnLabClassIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LabClassRoom
        {
            get
            {
                return _LabClassRoom;
            }
            set
            {
                OnLabClassRoomChanging(value);
                ReportPropertyChanging("LabClassRoom");
                _LabClassRoom = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LabClassRoom");
                OnLabClassRoomChanged();
            }
        }
        private global::System.String _LabClassRoom;
        partial void OnLabClassRoomChanging(global::System.String value);
        partial void OnLabClassRoomChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.String _Date;
        partial void OnDateChanging(global::System.String value);
        partial void OnDateChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TheoryClassID
        {
            get
            {
                return _TheoryClassID;
            }
            set
            {
                OnTheoryClassIDChanging(value);
                ReportPropertyChanging("TheoryClassID");
                _TheoryClassID = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TheoryClassID");
                OnTheoryClassIDChanged();
            }
        }
        private global::System.String _TheoryClassID;
        partial void OnTheoryClassIDChanging(global::System.String value);
        partial void OnTheoryClassIDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ClassQuestionMarkModel", "FK_StudentInfo_0", "StudentInfo")]
        public EntityCollection<StudentInfo> StudentInfo
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StudentInfo>("ClassQuestionMarkModel.FK_StudentInfo_0", "StudentInfo");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StudentInfo>("ClassQuestionMarkModel.FK_StudentInfo_0", "StudentInfo", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ClassQuestionMarkModel", Name="MarkInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MarkInfo : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 MarkInfo 对象。
        /// </summary>
        /// <param name="markID">MarkID 属性的初始值。</param>
        public static MarkInfo CreateMarkInfo(global::System.String markID)
        {
            MarkInfo markInfo = new MarkInfo();
            markInfo.MarkID = markID;
            return markInfo;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MarkID
        {
            get
            {
                return _MarkID;
            }
            set
            {
                if (_MarkID != value)
                {
                    OnMarkIDChanging(value);
                    ReportPropertyChanging("MarkID");
                    _MarkID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("MarkID");
                    OnMarkIDChanged();
                }
            }
        }
        private global::System.String _MarkID;
        partial void OnMarkIDChanging(global::System.String value);
        partial void OnMarkIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SID
        {
            get
            {
                return _SID;
            }
            set
            {
                OnSIDChanging(value);
                ReportPropertyChanging("SID");
                _SID = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SID");
                OnSIDChanged();
            }
        }
        private global::System.String _SID;
        partial void OnSIDChanging(global::System.String value);
        partial void OnSIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Mark
        {
            get
            {
                return _Mark;
            }
            set
            {
                OnMarkChanging(value);
                ReportPropertyChanging("Mark");
                _Mark = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Mark");
                OnMarkChanged();
            }
        }
        private Nullable<global::System.Int32> _Mark;
        partial void OnMarkChanging(Nullable<global::System.Int32> value);
        partial void OnMarkChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ClassQuestionMarkModel", "FK_MarkInfo_0", "StudentInfo")]
        public StudentInfo StudentInfo
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StudentInfo>("ClassQuestionMarkModel.FK_MarkInfo_0", "StudentInfo").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StudentInfo>("ClassQuestionMarkModel.FK_MarkInfo_0", "StudentInfo").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StudentInfo> StudentInfoReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StudentInfo>("ClassQuestionMarkModel.FK_MarkInfo_0", "StudentInfo");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StudentInfo>("ClassQuestionMarkModel.FK_MarkInfo_0", "StudentInfo", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ClassQuestionMarkModel", Name="StudentInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StudentInfo : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 StudentInfo 对象。
        /// </summary>
        /// <param name="sID">SID 属性的初始值。</param>
        public static StudentInfo CreateStudentInfo(global::System.String sID)
        {
            StudentInfo studentInfo = new StudentInfo();
            studentInfo.SID = sID;
            return studentInfo;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SID
        {
            get
            {
                return _SID;
            }
            set
            {
                if (_SID != value)
                {
                    OnSIDChanging(value);
                    ReportPropertyChanging("SID");
                    _SID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SID");
                    OnSIDChanged();
                }
            }
        }
        private global::System.String _SID;
        partial void OnSIDChanging(global::System.String value);
        partial void OnSIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SName
        {
            get
            {
                return _SName;
            }
            set
            {
                OnSNameChanging(value);
                ReportPropertyChanging("SName");
                _SName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SName");
                OnSNameChanged();
            }
        }
        private global::System.String _SName;
        partial void OnSNameChanging(global::System.String value);
        partial void OnSNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LabClassID
        {
            get
            {
                return _LabClassID;
            }
            set
            {
                OnLabClassIDChanging(value);
                ReportPropertyChanging("LabClassID");
                _LabClassID = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LabClassID");
                OnLabClassIDChanged();
            }
        }
        private global::System.String _LabClassID;
        partial void OnLabClassIDChanging(global::System.String value);
        partial void OnLabClassIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Rate
        {
            get
            {
                return _Rate;
            }
            set
            {
                OnRateChanging(value);
                ReportPropertyChanging("Rate");
                _Rate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rate");
                OnRateChanged();
            }
        }
        private Nullable<global::System.Int32> _Rate;
        partial void OnRateChanging(Nullable<global::System.Int32> value);
        partial void OnRateChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ClassQuestionMarkModel", "FK_StudentInfo_0", "LabClass")]
        public LabClass LabClass
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LabClass>("ClassQuestionMarkModel.FK_StudentInfo_0", "LabClass").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LabClass>("ClassQuestionMarkModel.FK_StudentInfo_0", "LabClass").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LabClass> LabClassReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LabClass>("ClassQuestionMarkModel.FK_StudentInfo_0", "LabClass");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<LabClass>("ClassQuestionMarkModel.FK_StudentInfo_0", "LabClass", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ClassQuestionMarkModel", "FK_MarkInfo_0", "MarkInfo")]
        public EntityCollection<MarkInfo> MarkInfo
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MarkInfo>("ClassQuestionMarkModel.FK_MarkInfo_0", "MarkInfo");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MarkInfo>("ClassQuestionMarkModel.FK_MarkInfo_0", "MarkInfo", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ClassQuestionMarkModel", Name="StudentMark_View")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StudentMark_View : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 StudentMark_View 对象。
        /// </summary>
        /// <param name="markID">MarkID 属性的初始值。</param>
        public static StudentMark_View CreateStudentMark_View(global::System.String markID)
        {
            StudentMark_View studentMark_View = new StudentMark_View();
            studentMark_View.MarkID = markID;
            return studentMark_View;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MarkID
        {
            get
            {
                return _MarkID;
            }
            set
            {
                if (_MarkID != value)
                {
                    OnMarkIDChanging(value);
                    ReportPropertyChanging("MarkID");
                    _MarkID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("MarkID");
                    OnMarkIDChanged();
                }
            }
        }
        private global::System.String _MarkID;
        partial void OnMarkIDChanging(global::System.String value);
        partial void OnMarkIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SID
        {
            get
            {
                return _SID;
            }
            set
            {
                OnSIDChanging(value);
                ReportPropertyChanging("SID");
                _SID = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SID");
                OnSIDChanged();
            }
        }
        private global::System.String _SID;
        partial void OnSIDChanging(global::System.String value);
        partial void OnSIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SName
        {
            get
            {
                return _SName;
            }
            set
            {
                OnSNameChanging(value);
                ReportPropertyChanging("SName");
                _SName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SName");
                OnSNameChanged();
            }
        }
        private global::System.String _SName;
        partial void OnSNameChanging(global::System.String value);
        partial void OnSNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Mark
        {
            get
            {
                return _Mark;
            }
            set
            {
                OnMarkChanging(value);
                ReportPropertyChanging("Mark");
                _Mark = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Mark");
                OnMarkChanged();
            }
        }
        private Nullable<global::System.Int32> _Mark;
        partial void OnMarkChanging(Nullable<global::System.Int32> value);
        partial void OnMarkChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LabClassID
        {
            get
            {
                return _LabClassID;
            }
            set
            {
                OnLabClassIDChanging(value);
                ReportPropertyChanging("LabClassID");
                _LabClassID = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LabClassID");
                OnLabClassIDChanged();
            }
        }
        private global::System.String _LabClassID;
        partial void OnLabClassIDChanging(global::System.String value);
        partial void OnLabClassIDChanged();

        #endregion
    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ClassQuestionMarkModel", Name="TheoryClass")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TheoryClass : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 TheoryClass 对象。
        /// </summary>
        /// <param name="theoryClassID">TheoryClassID 属性的初始值。</param>
        public static TheoryClass CreateTheoryClass(global::System.String theoryClassID)
        {
            TheoryClass theoryClass = new TheoryClass();
            theoryClass.TheoryClassID = theoryClassID;
            return theoryClass;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TheoryClassID
        {
            get
            {
                return _TheoryClassID;
            }
            set
            {
                if (_TheoryClassID != value)
                {
                    OnTheoryClassIDChanging(value);
                    ReportPropertyChanging("TheoryClassID");
                    _TheoryClassID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("TheoryClassID");
                    OnTheoryClassIDChanged();
                }
            }
        }
        private global::System.String _TheoryClassID;
        partial void OnTheoryClassIDChanging(global::System.String value);
        partial void OnTheoryClassIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TheoryClassRoom
        {
            get
            {
                return _TheoryClassRoom;
            }
            set
            {
                OnTheoryClassRoomChanging(value);
                ReportPropertyChanging("TheoryClassRoom");
                _TheoryClassRoom = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TheoryClassRoom");
                OnTheoryClassRoomChanged();
            }
        }
        private global::System.String _TheoryClassRoom;
        partial void OnTheoryClassRoomChanging(global::System.String value);
        partial void OnTheoryClassRoomChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.String _Date;
        partial void OnDateChanging(global::System.String value);
        partial void OnDateChanged();

        #endregion
    
    }

    #endregion
    
}
